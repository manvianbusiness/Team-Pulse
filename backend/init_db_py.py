# -*- coding: utf-8 -*-
"""init_db.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1i-T9tn9fUqpjSKFtg9bmkEcfSW0IGoa3
"""

# init_db.py

import mysql.connector
import os

# Database configuration (same as in app.py)
DB_CONFIG = {
    'host': 'localhost',
    'user': 'root',
    'password': 'mysql123', # !! IMPORTANT: Use your actual MySQL root password here
    # Note: We initially connect without specifying a database to create it first
}

DATABASE_NAME = 'leave_management_db' # The database name we want to create and use

def initialize_database():
    print(f"Connecting to MySQL server at {DB_CONFIG['host']}...")
    try:
        # Connect to MySQL server (without specifying a database)
        conn = mysql.connector.connect(
            host=DB_CONFIG['host'],
            user=DB_CONFIG['user'],
            password=DB_CONFIG['password']
        )
        cursor = conn.cursor()

        # Create the database if it doesn't exist
        print(f"Creating database '{DATABASE_NAME}' if it doesn't exist...")
        cursor.execute(f"CREATE DATABASE IF NOT EXISTS {DATABASE_NAME}")
        conn.database = DATABASE_NAME # Switch to the newly created/existing database
        print(f"Switched to database '{DATABASE_NAME}'.")

        # Read SQL commands from schema.sql
        schema_file_path = os.path.join(os.path.dirname(__file__), 'schema.sql')
        with open(schema_file_path, 'r') as f:
            sql_commands = f.read()

        # Split commands by semicolon (careful with comments and specific SQL structures)
        # A more robust solution might parse the SQL, but this is fine for simple scripts
        commands = [cmd.strip() for cmd in sql_commands.split(';') if cmd.strip()]

        print("Executing SQL commands from schema.sql...")
        for command in commands:
            try:
                cursor.execute(command)
                # print(f"Executed: {command[:50]}...") # Optional: print executed command snippet
            except mysql.connector.Error as err:
                print(f"Error executing command: {err}")
                print(f"Command: {command[:100]}...") # Print problematic command snippet

        # Commit the changes
        conn.commit()
        print("Database initialized successfully!")

    except mysql.connector.Error as err:
        if err.errno == mysql.connector.errorcode.ER_ACCESS_DENIED_ERROR:
            print("Error: Access denied. Check your MySQL username and password in DB_CONFIG.")
        elif err.errno == mysql.connector.errorcode.ER_BAD_DB_ERROR:
            print(f"Error: Database '{DATABASE_NAME}' does not exist or access denied.")
        else:
            print(f"An unexpected error occurred: {err}")
    finally:
        if 'conn' in locals() and conn.is_connected():
            cursor.close()
            conn.close()
            print("MySQL connection closed.")

if __name__ == '__main__':
    initialize_database()